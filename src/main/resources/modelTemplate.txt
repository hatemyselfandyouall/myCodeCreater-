package com.insigma.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import tk.mybatis.mapper.entity.Example;

import java.util.Date;
import java.util.List;


public class ClassNameServiceImpl implements ClassNameFacade {

    @Autowired
    ClassNameMapper LowCaseClassNameMapper;

    @Override
    public PageInfo<ClassName> getClassNameList(ClassNameListVO LowCaseClassNameListVO) {
        if (LowCaseClassNameListVO==null||LowCaseClassNameListVO.getPageNum()==null||LowCaseClassNameListVO.getPageSize()==null) {
            return null;
        }
        PageHelper.startPage(LowCaseClassNameListVO.getPageNum().intValue(),LowCaseClassNameListVO.getPageSize().intValue());
        ClassName exampleObeject=new ClassName();
        List<ClassName> LowCaseClassNameList=LowCaseClassNameMapper.select(exampleObeject);
        PageInfo<ClassName> LowCaseClassNamePageInfo=new PageInfo<>(LowCaseClassNameList);
        return LowCaseClassNamePageInfo;
    }

    @Override
    public ClassName getClassNameDetail(ClassNameDetailVO LowCaseClassNameDetailVO) {
        if (LowCaseClassNameDetailVO==null||LowCaseClassNameDetailVO.getId()==null) {
            return null;
        };
        ClassName LowCaseClassName=LowCaseClassNameMapper.selectByPrimaryKey(LowCaseClassNameDetailVO.getId());
        return LowCaseClassName;
    }

    @Override
    public Integer saveClassName(ClassNameSaveVO LowCaseClassNameSaveVO) {
        if (LowCaseClassNameSaveVO==null){
            return 0;
        }
        ClassName LowCaseClassName= JSONUtil.convert(LowCaseClassNameSaveVO,ClassName.class);
        if (LowCaseClassName.getId()==null){
            return LowCaseClassNameMapper.insertSelective(LowCaseClassName);
        }else {
            LowCaseClassName.setModifyTime(new Date());
            Example example=new Example(ClassName.class);
            example.createCriteria().andEqualTo("id",LowCaseClassName.getId());
            return LowCaseClassNameMapper.updateByExampleSelective(LowCaseClassName,example);
        }
    }

    @Override
    public Integer deleteClassName(ClassNameDeleteVO LowCaseClassNameDeleteVO) {
        if (LowCaseClassNameDeleteVO==null||LowCaseClassNameDeleteVO.getId()==null){
            return 0;
        }
        ClassName LowCaseClassName=new ClassName();
        LowCaseClassName.setModifyTime(new Date());
        LowCaseClassName.setIsDelete(LowCaseClassNameDeleteVO.getIsDelete());
        Example example=new Example(ClassName.class);
        example.createCriteria().andEqualTo("id",LowCaseClassNameDeleteVO.getId());
        return LowCaseClassNameMapper.updateByExampleSelective(LowCaseClassName,example);
    }
}
